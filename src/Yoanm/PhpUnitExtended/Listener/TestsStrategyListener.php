<?php
namespace Yoanm\PhpUnitExtended\Listener;

/**
 * @see https://github.com/yoanm/Readme/blob/master/TESTS_STRATEGY.md#rules-strict-mode-fails-if-risky-tests
 * Will convert a risky test regarding following option to failure
 *  =>phpunit process will return a failed result at end
 *
 * List of managed options :
 * - beStrictAboutOutputDuringTests="true" / --report-useless-tests
 * - beStrictAboutTestsThatDoNotTestAnything="true" / --disallow-test-output
 * - beStrictAboutChangesToGlobalState="true" / --strict-global-state
 *   /!\ Requires backupGlobals="true" or "@backupGlobals enabled" for globals variables manipulation
 *   /!\ Requires backupStaticAttributes="true" or "@backupStaticAttributes enabled" for static attributes manipulation
 * - checkForUnintentionallyCoveredCode="true" / --strict-coverage
 *   /!\ Requires forceCoversAnnotation="true"
 *      => In case the test execute code that are not listed by a @covers or @uses annotations
 *         @see https://github.com/yoanm/Readme/blob/master/strategy/tests/README.md#rules-real-coverage-risky-tests
 *         Risky tests will be managed as not executed tests and so, code coverage generated by them will be removed
 *          => Allow failure based on coverage
 */
class TestsStrategyListener extends \PHPUnit_Framework_BaseTestListener
{
    /**
     * @param \PHPUnit_Framework_Test $test
     * @param \Exception              $e
     * @param float                   $time
     */
    public function addRiskyTest(\PHPUnit_Framework_Test $test, \Exception $e, $time)
    {
        /* Must be PHPUnit_Framework_TestCase instance to have access to "getTestResultObject" method */
        if ($test instanceof \PHPUnit_Framework_TestCase) {
            $reason = $this->processEvent($test, $e);
            if (null !== $reason) {
                $test->getTestResultObject()->addFailure(
                    $test,
                    new \PHPUnit_Framework_AssertionFailedError(
                        sprintf(
                            "Strict mode - %s :\n%s",
                            $reason,
                            $e->getMessage()
                        )
                    ),
                    $time
                );
            }
        }
    }

    /**
     * @param \PHPUnit_Framework_TestCase $test
     */
    protected function removeCoverageFor(\PHPUnit_Framework_TestCase $test)
    {
        $coverage = $test->getTestResultObject()->getCodeCoverage();
        if (null !== $coverage) {
            $id = $test->toString();
            $data = $coverage->getData();
            foreach ($data as $fileName => $lineData) {
                foreach ($lineData as $lineNumber => $testIdList) {
                    if (is_array($testIdList)) {
                        foreach ($testIdList as $testIdKey => $testId) {
                            if ($id === $testId) {
                                unset($data[$fileName][$lineNumber][$testIdKey]);
                            }
                        }
                    }
                }
            }
            $coverage->setData($data);
        }
    }

    /**
     * @param \PHPUnit_Framework_TestCase $test
     * @param \Exception                  $e
     *
     * @return null|string
     */
    protected function processEvent(\PHPUnit_Framework_TestCase $test, \Exception $e)
    {
        $reason = null;
        switch (true) {
            /* beStrictAboutOutputDuringTests="true" */
            case $e instanceof \PHPUnit_Framework_OutputError:
                $reason = 'No output during test';
                /** Ack - remove coverage */
                $this->removeCoverageFor($test);
                /** END Ack */
                break;
            /* checkForUnintentionallyCoveredCode="true" */
            case $e instanceof \PHPUnit_Framework_UnintentionallyCoveredCodeError:
                $reason = 'Executed code must be defined with @covers and @uses annotations';
                break;
            default:
                if (preg_match('#\-\-\- Global variables before the test#', $e->getMessage())) {
                    /* beStrictAboutChangesToGlobalState="true" (no specific exception) for globals */
                    $reason = 'No global variable manipulation during test';
                } elseif (preg_match('#\-\-\- Static attributes before the test#', $e->getMessage())) {
                    /* beStrictAboutChangesToGlobalState="true" (no specific exception) for static var */
                    /* Only when beStrictAboutChangesToGlobalState="true" */
                    $reason = 'No static attribute manipulation during test';
                } elseif (preg_match('#This test did not perform any assertions#', $e->getMessage())) {
                    /* beStrictAboutTestsThatDoNotTestAnything="true" (no specific exception) */
                    $reason = 'No test that do not test anything';
                }
                break;
        }
        return $reason;
    }
}
